name: "Classroom Autograder – Unit 8.4: Iteration (Guessing Game)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest tests (simple: one function runJS, no listeners)
        run: |
          mkdir -p __tests__
          cat > __tests__/guessing.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          function findIndexPath() {
            const candidates = ['index.html', 'public/index.html', 'src/index.html', 'docs/index.html'];
            for (const c of candidates) if (fs.existsSync(c)) return c;
            return null;
          }

          async function wait(ms = 20) {
            return new Promise(res => setTimeout(res, ms));
          }

          async function loadDOM() {
            const indexPath = findIndexPath();
            if (!indexPath) throw new Error("index.html not found");

            const baseDir = path.dirname(path.resolve(indexPath));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';

            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // silence script load errors in logs

            const dom = await JSDOM.fromFile(indexPath, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            const { window } = dom;

            // Seed randomness so Math.floor(Math.random()*10)+1 === 1
            Object.defineProperty(window.Math, 'random', { value: () => 0, writable: false });

            // Disallow prompt/alert (must use DOM + textContent)
            window.alert = () => { throw new Error('Use textContent, not alert().'); };
            window.prompt = () => { throw new Error('Use inputs, not prompt().'); };

            await new Promise(res => window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          function setValue(window, document, id, val) {
            const el = document.getElementById(id);
            if (!el) return false;
            el.value = String(val);
            // No listeners required; tests will call runJS() directly
            return true;
          }

          function textOf(document, id) {
            const el = document.getElementById(id);
            return (el?.textContent || el?.innerText || '').trim();
          }

          function callRun(window) {
            try { window.eval('if (typeof runJS==="function"){ runJS(); }'); } catch {}
            if (typeof window.runJS === 'function') window.runJS();
          }

          describe("Unit 8.4 – Iteration Guessing Game (simple)", () => {
            let dom, window, document;

            beforeEach(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
            });

            test("has required elements (#guess, #feedback, #tries, #hintList)", () => {
              expect(document.getElementById('guess')).not.toBeNull();
              expect(document.getElementById('feedback')).not.toBeNull();
              expect(document.getElementById('tries')).not.toBeNull();
              expect(document.getElementById('hintList')).not.toBeNull();
            });

            test("does not use prompt/alert (uses inputs + textContent)", () => {
              // If prompt/alert were used, they'd throw in beforeEach
              expect(true).toBe(true);
            });

            test("invalid input shows an 'invalid' message in #feedback", async () => {
              expect(setValue(window, document, 'guess', 'abc')).toBe(true);
              callRun(window);
              await wait();
              const fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/invalid/);
            });

            test("selection logic: too high / too low|invalid / win (seeded answer=1)", async () => {
              // too high (10 vs 1)
              expect(setValue(window, document, 'guess', 10)).toBe(true);
              callRun(window);
              await wait();
              let fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/high/);

              // too low (0 vs 1) - allow 'low' or 'invalid'
              expect(setValue(window, document, 'guess', 0)).toBe(true);
              callRun(window);
              await wait();
              fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/low|invalid/);

              // win (1)
              expect(setValue(window, document, 'guess', 1)).toBe(true);
              callRun(window);
              await wait();
              fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/win|correct|you.*got/i);
            });

            test("tries counter increments on valid guesses", async () => {
              // Reset DOM
              dom = await loadDOM();
              window = dom.window;
              document = window.document;

              const toNum = s => Number((s.match(/-?\\d+(?:\\.\\d+)?/)||[])[0]);
              const start = toNum(textOf(document, 'tries')) || 0;

              // Two valid guesses: 10 (high), 1 (win)
              expect(setValue(window, document, 'guess', 10)).toBe(true);
              callRun(window);
              await wait();
              expect(setValue(window, document, 'guess', 1)).toBe(true);
              callRun(window);
              await wait();

              const after = toNum(textOf(document, 'tries')) || 0;
              expect(after).toBeGreaterThan(start);
            });

            test("for-loop task: #hintList shows numbers 1..10 (10 items or text containing 1..10)", () => {
              const el = document.getElementById('hintList');
              const kids = Array.from(el?.children || []);
              const txt = (el?.textContent || '').trim();
              const hasTen = kids.length >= 10;
              const found = (txt.match(/\\b(?:10|[1-9])\\b/g) || []).length >= 10;
              expect(hasTen || found).toBe(true);
            });
          });
          EOF

      - name: Run tests and create JSON results
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --verbose --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: jest-results.json

      - name: Summarize results for students (no solutions shown)
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));

          const total  = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const runtimeErrSuites = r.numRuntimeErrorTestSuites ?? 0;
          const all = (r.testResults || []).flatMap(tr => tr.assertionResults || []);
          const textOf = ar => (ar.title || ar.fullName || '').toLowerCase();
          const passedByKeyword = kw => all.some(ar => textOf(ar).includes(kw.toLowerCase()) && ar.status==='passed');

          const checks = [
            {label: 'has required elements', keyword: 'has required elements', hint: 'Include #guess, #feedback, #tries, #hintList.'},
            {label: 'no prompt/alert (uses inputs & textContent)', keyword: 'does not use prompt/alert', hint: 'Use input fields and textContent updates.'},
            {label: 'invalid input handled', keyword: 'invalid input', hint: 'Show an “invalid” message for non-numeric or out-of-range.'},
            {label: 'selection logic works (low/high/win)', keyword: 'selection logic', hint: 'Compare guess vs answer and update feedback accordingly.'},
            {label: 'tries counter increments', keyword: 'tries counter', hint: 'Increase visible tries on each valid guess.'},
            {label: 'for-loop task complete', keyword: 'for-loop task', hint: 'Populate #hintList with 1..10 using a for loop.'}
          ];

          const checkIcon = ok => (ok ? '✅' : '❌');

          const out = [];
          out.push('# Unit 8.4 Autograder Summary');
          out.push(`**Passed:** ${passed}/${total}  ·  **Failed:** ${failed}`);
          if (total === 0 || runtimeErrSuites > 0) {
            out.push('');
            out.push('> ⚠️ No tests ran. This usually means required files were not found (e.g., index.html).');
          }
          out.push('');
          out.push('## What you got right / need to fix');
          for (const {label, keyword, hint} of checks) {
            const ok = passedByKeyword(keyword);
            out.push(`${checkIcon(ok)} ${label}`);
            if (!ok) out.push(`   - Hint: ${hint}`);
          }
          out.push('');
          out.push('### Reminders');
          out.push('- Use an input with id **guess** and a button that calls `runJS()`.');
          out.push('- Update feedback via `textContent` in **#feedback** and keep a tries count in **#tries**.');
          out.push('- Use a **for loop** to fill **#hintList** with 1..10.');
          out.push('- No `prompt()` or `alert()`—use the page UI.');
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out.join('\n'));
          NODE

      - name: Set job status from test results
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total  = r.numTotalTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const runtimeErrSuites = r.numRuntimeErrorTestSuites ?? 0;
          if (failed > 0 || runtimeErrSuites > 0 || total === 0) {
            console.error('Failing job: failedTests=' + failed + ', runtimeErrorSuites=' + runtimeErrSuites + ', totalTests=' + total);
            process.exit(1);
          } else {
            console.log('All tests passed: failedTests=' + failed + ', runtimeErrorSuites=' + runtimeErrSuites + ', totalTests=' + total);
            process.exit(0);
          }
          NODE
