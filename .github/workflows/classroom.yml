name: "Classroom Autograder – Unit 8.4: Iteration (Guessing Game)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest tests
        run: |
          mkdir -p __tests__
          cat > __tests__/guessing.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          function findPath(cands) {
            for (const p of cands) if (fs.existsSync(p)) return p;
            return null;
          }

          function findIndexPath() {
            return findPath(['index.html','public/index.html','src/index.html','docs/index.html']);
          }
          function findScriptPath() {
            return findPath(['script.js','public/script.js','src/script.js','docs/script.js']);
          }

          async function wait(ms = 60) { return new Promise(r => setTimeout(r, ms)); }

          async function loadDOM() {
            const indexPath = findIndexPath();
            if (!indexPath) throw new Error("index.html not found");
            const baseDir = path.dirname(path.resolve(indexPath));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';
            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {});
            const dom = await JSDOM.fromFile(indexPath, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });
            const { window } = dom;
            // Seed: secret = 1
            Object.defineProperty(window.Math, 'random', { value: () => 0, writable: false });
            // Disallow prompts/alerts
            window.alert = () => { throw new Error('Use textContent, not alert().'); };
            window.prompt = () => { throw new Error('Use inputs, not prompt().'); };
            await new Promise(res => window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          function setValue(window, document, id, val) {
            const el = document.getElementById(id);
            if (!el) return false;
            el.value = String(val);
            return true;
          }
          function textOf(document, id) {
            const el = document.getElementById(id);
            return (el?.textContent || el?.innerText || '').trim();
          }
          function hasDigit(s){ return /\d/.test(s || ''); }
          function callRun(window) {
            try { window.eval('if (typeof runJS==="function"){ runJS(); }'); } catch {}
            if (typeof window.runJS === 'function') window.runJS();
          }

          describe("Unit 8.4 – Iteration Guessing Game", () => {
            let dom, window, document, button;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
              button = document.querySelector('button');
            });

            test("has required elements (#guess, #feedback, #tries, #hintList) and button", () => {
              expect(document.getElementById('guess')).not.toBeNull();
              expect(document.getElementById('feedback')).not.toBeNull();
              expect(document.getElementById('tries')).not.toBeNull();
              expect(document.getElementById('hintList')).not.toBeNull();
              expect(button).not.toBeNull();
            });

            test("input disabled at load; enabled after Start; disabled again after win", async () => {
              const input = document.getElementById('guess');
              expect(input.disabled).toBe(true);

              // Start game
              callRun(window);
              await wait();
              expect(input.disabled).toBe(false);

              // Win path (secret seeded to 1): guess 1
              setValue(window, document, 'guess', 1);
              callRun(window);
              await wait();
              expect(input.disabled).toBe(true);
            });

            test("does not use prompt/alert (uses inputs + textContent)", () => {
              expect(true).toBe(true);
            });

            test("invalid input shows an 'invalid' message in #feedback", async () => {
              // Start
              callRun(window); await wait();
              setValue(window, document, 'guess', 'abc');
              callRun(window); await wait();
              const fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/invalid/);
            });

            test("selection logic: high / low|invalid / win (seed=1)", async () => {
              // Start (ensure new game)
              callRun(window); await wait();

              // high
              setValue(window, document, 'guess', 10);
              callRun(window); await wait();
              let fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/high/);

              // low or invalid (0)
              setValue(window, document, 'guess', 0);
              callRun(window); await wait();
              fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/low|invalid/);

              // win (1)
              setValue(window, document, 'guess', 1);
              callRun(window); await wait();
              fb = textOf(document, 'feedback').toLowerCase();
              expect(fb).toMatch(/win|correct|you.*got/i);
            });

            test("tries counter updates visibly across two valid guesses (format-agnostic)", async () => {
              // Start
              callRun(window); await wait();
              const triesBefore = textOf(document, 'tries');

              // First valid guess (10)
              setValue(window, document, 'guess', 10);
              callRun(window); await wait();
              const afterFirst = textOf(document, 'tries');

              // Second valid guess (1 - win)
              setValue(window, document, 'guess', 1);
              callRun(window); await wait();
              const triesAfter = textOf(document, 'tries');

              // must change at least once and end with a digit somewhere
              expect(triesAfter).not.toBe(triesBefore);
              expect(triesAfter).not.toBe(afterFirst);
              expect(hasDigit(triesAfter)).toBe(true);
            });

            test("for-loop task: #hintList shows numbers 1..10 (on start or after first run)", async () => {
              // Start
              callRun(window); await wait();
              const el = document.getElementById('hintList');
              const kids = Array.from(el?.children || []);
              const txt = (el?.textContent || '').trim();
              const hasTen = kids.length >= 10;
              const found = (txt.match(/\\b(?:10|[1-9])\\b/g) || []).length >= 10;
              expect(hasTen || found).toBe(true);
            });

            test("script.js contains a while loop", () => {
              const scriptPath = findScriptPath();
              expect(scriptPath).not.toBeNull();
              const src = fs.readFileSync(scriptPath, 'utf8');
              // Require at least one while(...) occurrence
              expect(/\bwhile\s*\(/.test(src)).toBe(true);
            });
          });
          EOF

      - name: Run tests
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results 
          path: jest-results.json

      - name: Summarize results for students 
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const all = (r.testResults || []).flatMap(t => t.assertionResults || []);
          const textOf = t => (t.title || t.fullName || '').toLowerCase();
          const passedBy = k => all.some(t => textOf(t).includes(k.toLowerCase()) && t.status === 'passed');

          const checks = [
            {label:'has required elements', key:'has required elements', hint:'Include #guess, #feedback, #tries, #hintList, and a button.'},
            {label:'input disabled/enabled/disabled flow', key:'input disabled at load', hint:'Input disabled at load, enabled on Start, disabled again after win.'},
            {label:'no prompt/alert (uses inputs & textContent)', key:'does not use prompt/alert', hint:'Use input fields and textContent updates.'},
            {label:'invalid input handled', key:'invalid input', hint:'Show “invalid” for non-numeric or out-of-range.'},
            {label:'selection logic works (high/low/win)', key:'selection logic', hint:'Compare guess vs secret and update feedback.'},
            {label:'tries counter updates', key:'tries counter updates', hint:'Update #tries on valid guesses.'},
            {label:'for-loop task complete', key:'for-loop task', hint:'Populate #hintList with 1–10 using a for loop.'},
            {label:'while loop present in script.js', key:'contains a while loop', hint:'Include while(...) in your code to keep checking until correct.'}
          ];

          const icon = ok => ok ? '✅' : '❌';
          const out = [];
          out.push(`# Unit 8.4 Autograder Summary`);
          out.push(`**Passed:** ${passed}/${total} · **Failed:** ${failed}\n`);
          out.push(`## What you got right / need to fix`);
          for (const c of checks) {
            const ok = passedBy(c.key);
            out.push(`${icon(ok)} ${c.label}`);
            if (!ok) out.push(`   - Hint: ${c.hint}`);
          }
          out.push(`\n### Reminders`);
          out.push(`- One button calls runJS(): start → guess → win → reset.`);
          out.push(`- Input #guess is disabled until start; disabled again after win.`);
          out.push(`- Use a **for loop** for #hintList (1..10) and a **while loop** to keep checking guesses.`);
          out.push(`- No prompt()/alert(); update the page with textContent.`);
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out.join('\n'));
          NODE

      - name: Set job status
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          if (failed > 0 || total === 0) process.exit(1);
          NODE
