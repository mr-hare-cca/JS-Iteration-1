name: "Classroom Autograder – Unit 8.4: Iteration (Guessing Game)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test dependencies
        run: |
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Create Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Create Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: [
              '**/__tests__/**/*.test.cjs',
              '**/?(*.)+(spec|test).[jt]s?(x)'
            ]
          };
          EOF

      - name: Create Jest tests
        run: |
          mkdir -p __tests__
          cat > __tests__/guessing.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          function findPath(cands){ for(const p of cands){ if(fs.existsSync(p)) return p; } return null; }
          function findIndexPath(){ return findPath(['index.html','public/index.html','src/index.html','docs/index.html']); }
          function findScriptPath(){ return findPath(['script.js','public/script.js','src/script.js','docs/script.js']); }
          const wait = (ms=50)=>new Promise(r=>setTimeout(r,ms));

          async function loadDOM() {
            const indexPath = findIndexPath();
            if (!indexPath) throw new Error("index.html not found");
            const baseDir = path.dirname(path.resolve(indexPath));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g,'/') + '/';
            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // keep CI logs clean

            const dom = await JSDOM.fromFile(indexPath, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            const { window } = dom;
            // Block prompt/alert per assignment rules
            window.alert = () => { throw new Error('Use textContent, not alert().'); };
            window.prompt = () => { throw new Error('Use inputs, not prompt().'); };

            await new Promise(res => window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          function callRun(window){
            try { window.eval('if (typeof runJS==="function"){ runJS(); }'); } catch {}
            if (typeof window.runJS === 'function') window.runJS();
          }
          function setVal(doc,id,v){ const el=doc.getElementById(id); if(!el) return false; el.value=String(v); return true; }
          function textOf(doc,id){ const el=doc.getElementById(id); return (el?.textContent || el?.innerText || '').trim(); }
          const hasDigit = s => /\d/.test(s||'');

          describe("Unit 8.4 – Iteration Guessing Game", () => {
            let dom, window, document;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
            });

            test("has required elements (#guess, #feedback, #tries, #hintList) and button", () => {
              expect(document.getElementById('guess')).not.toBeNull();
              expect(document.getElementById('feedback')).not.toBeNull();
              expect(document.getElementById('tries')).not.toBeNull();
              expect(document.getElementById('hintList')).not.toBeNull();
              expect(document.querySelector('button')).not.toBeNull();
            });

            test("input disabled at load; enabled after Start; disabled again after win", async () => {
              const input = document.getElementById('guess');
              // at load
              expect(input.disabled).toBe(true);

              // seed secret to 5 for predictable win path
              Object.defineProperty(window.Math, 'random', { value: () => 0.4, configurable: true });
              // start game
              callRun(window); await wait();
              expect(input.disabled).toBe(false);

              // win immediately
              setVal(document,'guess',5);
              callRun(window); await wait();
              expect(input.disabled).toBe(true);
            });

            test("does not use prompt/alert (uses inputs + textContent)", () => {
              expect(true).toBe(true);
            });

            test("invalid input shows an 'invalid' message in #feedback", async () => {
              // fresh start
              Object.defineProperty(window.Math, 'random', { value: () => 0.4, configurable: true });
              callRun(window); await wait();
              setVal(document,'guess','abc');
              callRun(window); await wait();
              expect(textOf(document,'feedback').toLowerCase()).toMatch(/invalid/);
            });

            test("selection logic: high / low / win (seed secret=5)", async () => {
              // start new game with secret=5
              Object.defineProperty(window.Math, 'random', { value: () => 0.4, configurable: true });
              callRun(window); await wait();

              // too high
              setVal(document,'guess',10);
              callRun(window); await wait();
              expect(textOf(document,'feedback').toLowerCase()).toMatch(/high/);

              // too low
              setVal(document,'guess',1);
              callRun(window); await wait();
              expect(textOf(document,'feedback').toLowerCase()).toMatch(/low/);

              // win
              setVal(document,'guess',5);
              callRun(window); await wait();
              expect(textOf(document,'feedback').toLowerCase()).toMatch(/win|correct|you.*got/i);
            });

            test("tries counter updates across two valid guesses (format-agnostic)", async () => {
              // start new game with secret=5
              Object.defineProperty(window.Math, 'random', { value: () => 0.4, configurable: true });
              callRun(window); await wait();

              const t0 = textOf(document,'tries');

              // valid guess #1 (high)
              setVal(document,'guess',9);
              callRun(window); await wait();
              const t1 = textOf(document,'tries');

              // valid guess #2 (win)
              setVal(document,'guess',5);
              callRun(window); await wait();
              const t2 = textOf(document,'tries');

              // must visibly change and end with a digit somewhere
              expect(t2).not.toBe(t0);
              expect(t2).not.toBe(t1);
              expect(hasDigit(t2)).toBe(true);
            });

            test("for-loop task: #hintList shows numbers 1..10 (on start)", async () => {
              Object.defineProperty(window.Math, 'random', { value: () => 0.4, configurable: true });
              callRun(window); await wait();
              const el = document.getElementById('hintList');
              const kids = Array.from(el?.children || []);
              const txt = (el?.textContent || '').trim();
              const hasTen = kids.length >= 10;
              const found = (txt.match(/\\b(?:10|[1-9])\\b/g) || []).length >= 10;
              expect(hasTen || found).toBe(true);
            });

            test("script.js contains a while loop", () => {
              const p = findScriptPath();
              expect(p).not.toBeNull();
              const src = fs.readFileSync(p,'utf8');
              expect(/\bwhile\s*\(/.test(src)).toBe(true);
            });
          });
          EOF

      - name: Run tests
        id: jest
        continue-on-error: true
        run: npx jest --runInBand --json --outputFile=jest-results.json

      - name: Upload raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: jest-results.json

      - name: Summarize results for students
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const passed = r.numPassedTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          const all = (r.testResults || []).flatMap(t => t.assertionResults || []);
          const txt = t => (t.title || t.fullName || '').toLowerCase();
          const ok = k => all.some(t => txt(t).includes(k.toLowerCase()) && t.status==='passed');
          const checks = [
            {label:'has required elements', key:'has required elements'},
            {label:'input disabled/enabled/disabled flow', key:'input disabled at load'},
            {label:'no prompt/alert (uses inputs & textContent)', key:'does not use prompt/alert'},
            {label:'invalid input handled', key:'invalid input'},
            {label:'selection logic works (high/low/win)', key:'selection logic'},
            {label:'tries counter updates', key:'tries counter updates'},
            {label:'for-loop task complete', key:'for-loop task'},
            {label:'while loop present in script.js', key:'contains a while loop'}
          ];
          const icon = b => b ? '✅' : '❌';
          const out = [];
          out.push(`# Unit 8.4 Autograder Summary`);
          out.push(`**Passed:** ${passed}/${total} · **Failed:** ${failed}\n`);
          out.push(`## What you got right / need to fix`);
          for (const c of checks) {
            const pass = ok(c.key);
            out.push(`${icon(pass)} ${c.label}`);
            if (!pass) {
              const hints = {
                'input disabled/enabled/disabled flow':'Input disabled at load, enabled on Start, disabled again after win.',
                'selection logic works (high/low/win)':'Compare guess vs secret and update feedback.',
                'tries counter updates':'Update #tries on valid guesses.',
                'for-loop task complete':'Populate #hintList with 1–10 using a for loop.'
              };
              if (hints[c.label]) out.push(`   - Hint: ${hints[c.label]}`);
            }
          }
          out.push(`\n### Reminders`);
          out.push(`- One button calls runJS(): start → guess → win → reset.`);
          out.push(`- Input #guess is disabled until start; disabled again after win.`);
          out.push(`- Use a for loop for #hintList (1..10) and a while loop to keep checking guesses.`);
          out.push(`- No prompt()/alert(); update the page with textContent.`);
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out.join('\\n'));
          NODE

      - name: Set job status
        if: always()
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const r = JSON.parse(fs.readFileSync('jest-results.json','utf8'));
          const total = r.numTotalTests ?? 0;
          const failed = r.numFailedTests ?? 0;
          if (failed > 0 || total === 0) process.exit(1);
          NODE
